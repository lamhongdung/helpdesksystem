package com.ez.entity;

import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

import javax.persistence.*;
import javax.validation.constraints.*;
import java.io.Serializable;

@AllArgsConstructor
@NoArgsConstructor
@Getter
@Setter
@Entity
public class User implements Serializable {
    @Id
    // GenerationType.IDENTITY: id is generated by mySQL
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    @Min(value = 1, message = "Value of id must be greater than or equal to 1")
    private Long id;

    @NotBlank(message = "Please input an email")
//    @Email(regexp = "^[a-z0-9._%+-]+@[a-z0-9.-]+\\\\.[a-z]{2,4}$", message = "Email is incorrect format")
    @Email(message = "Email is incorrect format")
    private String email;

    // JsonProperty.Access.WRITE_ONLY:
    // the property may only be written (set) as part of deserialization
    // (using "setter" method, or assigning to Field, or passed as Creator argument)
    // but will not be read (get) for serialization
    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
    private String password;

    @Size(min = 1, max = 50, message="Length of the first name must be between 1 and 50 characters")
    private String firstName;

    @Size(min = 1, max = 50, message="Length of last name must be between 1 and 50 characters")
    private String lastName;

    @Pattern(regexp = "^[0-9]{10}$", message="Phone number must be 10 digits length")
    private String phone;
    @Size(max = 300, message="Address cannot be longer than 300 characters")
    private String address;

    // ROLE_CUSTOMER, ROLE_SUPPORTER, ROLE_ADMIN
    @NotBlank(message="Role must have value")
    private String role;

    // Active or Inactive
    @NotBlank(message="Status must have value")
    private String status;

}
