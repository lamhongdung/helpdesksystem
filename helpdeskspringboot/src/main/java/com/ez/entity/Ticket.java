package com.ez.entity;

import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import javax.persistence.*;
import javax.validation.constraints.*;
import java.io.Serializable;
import java.util.Date;

@AllArgsConstructor
@NoArgsConstructor
@ToString
@Getter
@Setter
@Entity
@Table(name = "ticket")
public class Ticket implements Serializable {

    @Id
    // GenerationType.IDENTITY: id is generated by mySQL
    @GeneratedValue(strategy = GenerationType.IDENTITY)
//    @Min(value = 1, message = "Value of id must be greater than or equal to 1")
    private Long ticketid;

    @Size(min = 1, message = "Please input a subject")
    private String subject;

    @Min(value = 1, message = "Value of category id must be greater than or equal to 1")
    private long categoryid;

    @Min(value = 1, message = "Value of creator id must be greater than or equal to 1")
    private long creatorid;

    @Min(value = 1, message = "Value of team id must be greater than or equal to 1")
    private long teamid;

    @Min(value = 1, message = "Value of priority id must be greater than or equal to 1")
    private long priorityid;

    // when ticket has just created:
    // - assigneeid = null: if assignment method = 'M'(manual).
    // - assigneeid = supporterid(userid): if assignment method = 'A'(Auto).
    // when ticket has just modified:
    // - assigneeid = supporterid
    private long assigneeid;

    // ticketStatusid:
    // - 1(Open): if assigneeid = null
    // - 2(Assigned): if assigneeid = supporterid(userid)
    // - 3(Resolved)
    // - 4(Closed)
    // - 5(Cancel)
    @Pattern(regexp = "^[1-5]", message = "Value of the ticket status must be 1 of 5 following values: Open, Assigned, Resolved, Closed, Cancel")
    private long ticketStatusid;

    @Size(min = 1, message = "Please input a content")
    private String content;

    // - customFilename = "": if user did not attach file or
    //                          attached file size exceeds max allowed file size
    // - customFilename = timestamp + UUID + extension(ex: .jpg): if user has attached file
    // ex: customFilename = "20230405143231_3ed7c8ea-114e-4c1f-a3d3-8e5a439e9aff.jpg".
    private String customFilename;

    // ticket is created on this datetime
//    @CreationTimestamp
    private Date createDatetime;

    // last time ticket is updated
//    @UpdateTimestamp
    private Date lastUpdateDatetime;

    @Min(value = 1, message = "User id of last person has updated the ticket must be greater than or equal to 1")
    private long lastUpdateByUserid;

    public Ticket(String subject, long categoryid, long creatorid, long teamid, long priorityid,
                  long ticketStatusid, String content, String customFilename, long lastUpdateByUserid) {

        this.subject = subject;
        this.categoryid = categoryid;
        this.creatorid = creatorid;
        this.teamid = teamid;
        this.priorityid = priorityid;
        this.ticketStatusid = ticketStatusid;
        this.content = content;
        this.customFilename = customFilename;
        this.lastUpdateByUserid = lastUpdateByUserid;

    }

}
